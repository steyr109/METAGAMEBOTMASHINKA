import telebot
from telebot import types
import time
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
import sqlite3
import threading
import json
import os
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

user_states = {}
games_data = None
tfidf_matrix = None
tfidf = None
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot_token = "7799776104:AAGLrlCXCFDjzjFAmt77qptkTAVhui6XIPM"
if bot_token is None:
    raise ValueError("BOT_TOKEN environment variable not set")

bot = telebot.TeleBot(bot_token)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('giveaways.db', check_same_thread=False) # –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Ç–æ–∫–æ–≤
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
  CREATE TABLE IF NOT EXISTS users (
    chat_id INTEGER PRIMARY KEY,
    last_steam_update DATETIME,
    last_epic_update DATETIME,
    last_gog_update DATETIME,
    subscribed BOOLEAN DEFAULT FALSE
  )
''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–∞–∑–¥–∞—á
cursor.execute('''
  CREATE TABLE IF NOT EXISTS giveaways (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    platform TEXT,
    title TEXT,
    link TEXT,
    date_added DATETIME
  )
''')

conn.commit()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def welcome(message):
    chat_id = message.chat.id

    # Database interaction (remains the same)
    cursor.execute("SELECT 1 FROM users WHERE chat_id = ?", (chat_id,))
    user_exists = cursor.fetchone()
    if not user_exists:
        cursor.execute("INSERT INTO users (chat_id) VALUES (?)", (chat_id,))
        conn.commit()

    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –ø–æ–¥–±–∏—Ä–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–µ –∏–≥—Ä—ã –Ω–∞ –≤–µ—á–µ—Ä! ‚ú®\n ‚Äî‚Äî‚Äî –ß—Ç–æ —è —É–º–µ—é üëá ‚Äî‚Äî‚Äî \n –û–ø–æ–≤–µ—â–∞—Ç—å –æ —Ä–∞–∑–¥–∞—á–∞—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä –∏ –∫–ª–µ–≤—ã—Ö —Å–∫–∏–¥–∫–∞—Ö –≤ Steam üéÆüí®\n –û–ø–æ–≤–µ—â–∞—Ç—å –æ —Ä–∞–∑–¥–∞—á–∞—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä –∏ –∫–ª–µ–≤—ã—Ö —Å–∫–∏–¥–∫–∞—Ö –≤ Epic Store üéÆü™Ñ\n –û–ø–æ–≤–µ—â–∞—Ç—å –æ —Ä–∞–∑–¥–∞—á–∞—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä –∏ –∫–ª–µ–≤—ã—Ö —Å–∫–∏–¥–∫–∞—Ö –≤ Gog StoreüéÆüéâ\n –ü–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π!‚ö°Ô∏èüéØ\n\n ‚Äî‚Äî‚Äî ü§ñ –ü–æ—á–µ–º—É –º–µ–Ω—è —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? üìç ‚Äî‚Äî‚Äî\n 1) –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –∏–≥—Ä –ø—Ä—è–º–æ –≤ Telegram! –í–µ—á–µ—Ä —è–≤–Ω–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! üéÆü§ñ\n 2) –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–∞–∑–¥–∞—á–∞—Ö —Å—Ä–∞–∑—É –∏–∑ —Ç—Ä—ë—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤! –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –º–æ–µ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!üíéüéÅ\n 3) –û–ø–æ–≤–µ—â—É –æ –Ω–æ–≤—ã—Ö —Ä–∞–∑–¥–∞—á–∞—Ö –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã! –ú–æ–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, —Ä–∞–∑–¥–∞—á–∏ –∏ —Å–∫–∏–¥–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—é –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è! üöÄ\n ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –≤ –º–µ–Ω—é! –¢–∞–∫–∂–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–µ–∂–∏–µ —Ä–∞–∑–¥–∞—á–∏! üí´"

    image_path = os.path.join('image', 'Hello.png')

    try:
        with open(image_path, 'rb') as photo_file: # Open file in a with statement, still
            photo = photo_file.read() # Read the file content into a variable
            bot.send_photo(chat_id, photo, caption=text)
    except FileNotFoundError:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print(f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        show_menu(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
def show_menu(message):
 markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
 item1 = types.KeyboardButton("–†–∞–∑–¥–∞—á–∏ –≤ Steam")
 item2 = types.KeyboardButton("–†–∞–∑–¥–∞—á–∏ –≤ Epic")
 item3 = types.KeyboardButton("–†–∞–∑–¥–∞—á–∏ –≤ GOG")
 item4 = types.KeyboardButton("–í—Å–µ —Ä–∞–∑–¥–∞—á–∏")
 item5 = types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
 item6 = types.KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
 item7 = types.KeyboardButton("–ü–æ–º–æ—â—å")
 item8 = types.KeyboardButton("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—É")
 markup.add(item1, item2, item3, item4, item5, item6, item7, item8)
 bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(content_types=['text'])
def func(message):
 chat_id = message.chat.id
 if message.text == "–†–∞–∑–¥–∞—á–∏ –≤ Steam":
  check_steam_giveaways(chat_id)
 elif message.text == "–†–∞–∑–¥–∞—á–∏ –≤ Epic":
  check_epic_giveaways(chat_id)
 elif message.text == "–†–∞–∑–¥–∞—á–∏ –≤ GOG":
  check_gog_giveaways(chat_id)
 elif message.text == "–í—Å–µ —Ä–∞–∑–¥–∞—á–∏":
  check_all_giveaways(chat_id)
 elif message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
  subscribe(chat_id)
 elif message.text == "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—É":
  start_recommendation(message)
 elif message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
  unsubscribe(chat_id)
 elif message.text == "–ü–æ–º–æ—â—å":
  help_command(message)
 elif message.text == "/start":
  welcome(message)
 elif message.text == "/subscribe":
  subscribe(chat_id)
 elif message.text == "/unsubscribe":
  unsubscribe(chat_id)
 elif message.text == "/check":
  check_giveaways(message)
 elif message.text == "/help":
  help_command(message)
 else:
  bot.send_message(chat_id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é.")

# ---- —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ----
def init_recommendations():
    global games_data, tfidf_matrix, tfidf
    try:
        games_data = pd.read_csv("games.csv")
        #  –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ['Name', 'Genre', 'Publisher', 'Rating', 'Platform']
        if not all(col in games_data.columns for col in required_columns):
            raise ValueError(f"games.csv must contain columns: {required_columns}")

        # –°–æ–∑–¥–∞–µ–º TF-IDF –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è
        tfidf = TfidfVectorizer(stop_words='english')
        tfidf_matrix = tfidf.fit_transform(games_data['Genre'] + ' ' + games_data['Publisher'] + ' ' + games_data['Platform'] + ' ' + games_data['Rating'].astype(str))

    except FileNotFoundError:
        print("–§–∞–π–ª games.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")

init_recommendations()

# —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
def get_recommendations(genre=None, publisher=None, platform=None, rating=None):
    if games_data is None or tfidf_matrix is None:
        return pd.DataFrame(columns=['Name', 'Genre', 'Publisher', 'Rating', 'Platform'])

    query = ""
    if genre:
        query += genre + " "
    if rating:
        query += rating + " "

    if not query.strip(): #–ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
      return pd.DataFrame(columns=['Name', 'Genre', 'Publisher', 'Rating', 'Platform'])

    query_vector = tfidf.transform([query])
    similarities = cosine_similarity(query_vector, tfidf_matrix).flatten()
    related_docs_indices = np.argsort(similarities)[::-1]
    recommendations = games_data.iloc[related_docs_indices[1:6]]
    return recommendations


@bot.message_handler(func=lambda message: message.text.lower() == "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—É")
def start_recommendation(message):
    chat_id = message.chat.id
    user_states[chat_id] = {"stage": "genre"}
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, RPG, Action, Adventure, Strategy, Simulation, Puzzle, Racing):")
    bot.register_next_step_handler(msg, handle_genre_selection)

#–∂–∞–Ω—Ä–æ–≤–æ–µ
def show_genre_selection(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    genres = ['RPG', 'Action', 'Adventure', 'Strategy', 'Simulation', 'Puzzle', 'Racing']
    markup.add(*genres)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=markup)

#@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("stage") == "genre")
def handle_genre_selection(message):
  chat_id = message.chat.id
  genre = message.text.strip().title()
  valid_genres = ['RPG', 'Action', 'Adventure', 'Strategy', 'Simulation', 'Puzzle', 'Racing']
  if genre in valid_genres:
      user_states[chat_id]["genre"] = genre
      user_states[chat_id]["stage"] = "rating"
      msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É (7, 8, –∏–ª–∏ 9):")
      bot.register_next_step_handler(msg, handle_rating_selection)
  else:
      msg = bot.reply_to(message, f"–ù–µ–≤–µ—Ä–Ω—ã–π –∂–∞–Ω—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(valid_genres)}")
      bot.register_next_step_handler(msg, handle_genre_selection) #Loop back if invalid


#–æ—Ü–µ–Ω–∫–æ–≤–æ–µ

def handle_rating_selection(message):
    chat_id = message.chat.id
    rating_str = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä
    if not rating_str.isdigit():
        msg = bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (7, 8 –∏–ª–∏ 9):")
        bot.register_next_step_handler(msg, handle_rating_selection)
        return

    try:
        rating = int(rating_str)
        if rating in [7, 8, 9]:
            user_states[chat_id]["rating"] = str(rating) + "+"
            recommendations = get_recommendations(genre=user_states[chat_id].get("genre"), rating=user_states[chat_id]["rating"])
            send_recommendations(recommendations, chat_id)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ send_recommendations
            del user_states[chat_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            msg = bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 7, 8 –∏–ª–∏ 9:")
            bot.register_next_step_handler(msg, handle_rating_selection)
    except Exception as e:
        msg = bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(msg, handle_rating_selection)


@bot.message_handler(func=lambda message: True)
def handle_default_message(message):
    chat_id = message.chat.id
    if chat_id in user_states:
        current_stage = user_states[chat_id]["stage"]
        if current_stage == "genre":
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        elif current_stage == "rating":
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    else:
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∏–≥—Ä—É'.")


def send_recommendations(recommendations, chat_id):
    if not recommendations.empty:
        for index, row in recommendations.iterrows():
            game_name = row['Name']
            image_url, description = get_steam_game_info(chat_id, game_name) # chat_id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å—é–¥–∞

            if image_url:
                try:
                    bot.send_photo(chat_id, image_url)
                except Exception as e:
                    bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {game_name}: {e}")
            else:
                bot.send_message(chat_id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {game_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            if description:
                bot.send_message(chat_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {game_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            else:
                bot.send_message(chat_id, f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {game_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def get_steam_game_info(chat_id, game_name):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã –Ω–∞ Steam (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ API)
        url = f"https://store.steampowered.com/search/?term={game_name}"
        response = requests.get(url)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ –±–µ–∑ API)
        image_element = soup.select_one('.col-search-result__image img') # –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        if image_element:
            image_url = image_element['src']
        else:
            image_url = None

        description_element = soup.select_one('.search_result_desc')
        description = description_element.text.strip() if description_element else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."


        return image_url, description

    except requests.exceptions.RequestException as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Steam: {e}")
        return None, None
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None, None


# –ö–æ–º–∞–Ω–¥–∞ '/subscribe' –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@bot.message_handler(commands=['subscribe'])
def subscribe(chat_id):
  cursor.execute("UPDATE users SET subscribed = TRUE WHERE chat_id = ?", (chat_id,))
  conn.commit()
  bot.send_message(chat_id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

# –ö–æ–º–∞–Ω–¥–∞ '/unsubscribe' –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.message_handler(commands=['unsubscribe'])
def unsubscribe(chat_id):
  cursor.execute("UPDATE users SET subscribed = FALSE WHERE chat_id = ?", (chat_id,))
  conn.commit()
  bot.send_message(chat_id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")

#  '/check' –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–¥–∞—á
@bot.message_handler(commands=['check'])
def check_giveaways(message):
  check_all_giveaways(message.chat.id)

@bot.message_handler(commands=['help'])
def help_command(message):
    chat_id = message.chat.id
    text = "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å\n/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–¥–∞—á–∏\n/help - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    image_path = os.path.join('image', 'Help.png')

    try:
        with open(image_path, 'rb') as photo_file:
            photo = photo_file.read()
            bot.send_photo(chat_id, photo, caption=text)
    except FileNotFoundError:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏:\n{text}")
        print(f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏:\n{text}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–¥–∞—á ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–¥–∞—á –Ω–∞ Steam
def check_steam_giveaways(chat_id):
  url = 'https://store.steampowered.com/search/?specials=1'
  response = requests.get(url)
  soup = BeautifulSoup(response.content, 'html.parser')

  giveaways = []
  for item in soup.find_all('a', class_='search_result_row'):
    title = item.find('span', class_='title').text.strip()
    link = item.get('href')
    giveaways.append({'title': title, 'link': link})

  #new_giveaways = []
  #for giveaway in giveaways:
   # if giveaway['title'] not in last_steam_giveaways:
    #  new_giveaways.append(giveaway)

  send_giveaway_notifications(giveaways, "Steam", chat_id)

  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–∑–¥–∞—á
  #last_steam_giveaways.clear()
  #for giveaway in giveaways:
  #  last_steam_giveaways[giveaway['title']] = giveaway['link']

  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è Steam –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  #cursor.execute("UPDATE users SET last_steam_update = ? WHERE chat_id = ?", (datetime.now(), chat_id))
  #conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–¥–∞—á –Ω–∞ Epic Games Store
def check_epic_giveaways(chat_id):
  url = 'https://store.epicgames.com/en-US/free-games'
  response = requests.get(url)
  soup = BeautifulSoup(response.content, 'html.parser')

  giveaways = []
  for item in soup.find_all('div', class_='css-1w6h27r'):
    title = item.find('span', class_='css-1n2d964').text.strip()
    link = item.find('a', class_='css-1w6h27r')['href']
    giveaways.append({'title': title, 'link': link})

 # new_giveaways = []
  #for giveaway in giveaways:
   # if giveaway['title'] not in last_epic_giveaways:
   #   new_giveaways.append(giveaway)

  #send_giveaway_notifications(new_giveaways, "Epic Games Store", chat_id)

  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–∑–¥–∞—á
  #last_epic_giveaways.clear()
  #for giveaway in giveaways:
  #  last_epic_giveaways[giveaway['title']] = giveaway['link']

  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è Epic –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  #cursor.execute("UPDATE users SET last_epic_update = ? WHERE chat_id = ?", (datetime.now(), chat_id))
  #conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–¥–∞—á –Ω–∞ GOG
def check_gog_giveaways(chat_id):
  url = 'https://www.gog.com/giveaways'
  response = requests.get(url)
  soup = BeautifulSoup(response.content, 'html.parser')

  giveaways = []
  for item in soup.find_all('div', class_='giveaway__details'):
    title = item.find('h2', class_='giveaway__title').text.strip()
    link = item.find('a', class_='giveaway__link')['href']
    giveaways.append({'title': title, 'link': link})

 # new_giveaways = []
  #for giveaway in giveaways:
  #  if giveaway['title'] not in last_gog_giveaways:
   #   new_giveaways.append(giveaway)

 # send_giveaway_notifications(new_giveaways, "GOG", chat_id)

  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–∑–¥–∞—á
  #last_gog_giveaways.clear()
  #for giveaway in giveaways:
  #  last_gog_giveaways[giveaway['title']] = giveaway['link']

  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è GOG –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  #cursor.execute("UPDATE users SET last_gog_update = ? WHERE chat_id = ?", (datetime.now(), chat_id))
  #conn.commit()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ä–∞–∑–¥–∞—á–∞—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_giveaway_notifications(giveaways, platform, chat_id):
  if giveaways:
    for giveaway in giveaways:
      bot.send_message(chat_id, f"–ù–æ–≤–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ {platform}: \n{giveaway['title']} - {giveaway['link']}")
  else:
    bot.send_message(chat_id, f"–ù–æ–≤—ã—Ö —Ä–∞–∑–¥–∞—á –≤ {platform} –Ω–µ—Ç!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑–¥–∞—á
def check_all_giveaways(chat_id):
  check_steam_giveaways(chat_id)
  check_epic_giveaways(chat_id)
  check_gog_giveaways(chat_id)
  bot.send_message(chat_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–∑–¥–∞—á–∞—Ö ---
#def repeat_giveaways(message, platform):
  #chat_id = message.chat.id
 # cursor.execute("SELECT last_steam_update, last_epic_update, last_gog_update FROM users WHERE chat_id = ?", (chat_id,))
 # last_updates = cursor.fetchone()

  #if platform == "Steam" and last_updates[0] is not None:
   # check_steam_giveaways(chat_id)
 # elif platform == "Epic Games Store" and last_updates[1] is not None:
 #   check_epic_giveaways(chat_id)
 # elif platform == "GOG" and last_updates[2] is not None:
 #   check_gog_giveaways(chat_id)
 # else:
 #   bot.send_message(chat_id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–¥–∞—á–∞—Ö –≤ {platform} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–∞—á ---
def auto_check_giveaways():
  while True:
    cursor.execute("SELECT chat_id FROM users WHERE subscribed = TRUE")
    users = cursor.fetchall()
    for user in users:
      check_all_giveaways(user[0])
    time.sleep(43200) # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ

bot.polling(none_stop=True)